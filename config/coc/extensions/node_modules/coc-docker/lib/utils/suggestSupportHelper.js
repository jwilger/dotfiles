/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See LICENSE.md in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const vscode_languageserver_protocol_1 = require("vscode-languageserver-protocol");
const https_1 = require("https");
const pkg = require('../../package.json');
class SuggestSupportHelper {
    suggestImages(word) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const results = yield searchImagesInRegistryHub(word, true);
            return results.map((image) => {
                const stars = image.star_count > 0
                    ? [`${image.star_count} ${image.star_count > 1 ? 'stars' : 'star'}`]
                    : [];
                return {
                    label: image.name,
                    kind: vscode_languageserver_protocol_1.CompletionItemKind.Value,
                    detail: tagsForImage(image).concat(stars).join(' '),
                    insertText: image.name,
                    documentation: image.description,
                };
            });
        });
    }
}
exports.SuggestSupportHelper = SuggestSupportHelper;
function tagsForImage(image) {
    let tags = [];
    if (image.is_automated) {
        tags.push('Automated');
    }
    else if (image.is_trusted) {
        tags.push('Trusted');
    }
    else if (image.is_official) {
        tags.push('Official');
    }
    return tags.map(t => `[${t}]`);
}
const popular = [
    { "is_automated": false, "name": "redis", "is_trusted": false, "is_official": true, "star_count": 1300, "description": "Redis is an open source key-value store that functions as a data structure server." },
    { "is_automated": false, "name": "ubuntu", "is_trusted": false, "is_official": true, "star_count": 2600, "description": "Ubuntu is a Debian-based Linux operating system based on free software." },
    { "is_automated": false, "name": "wordpress", "is_trusted": false, "is_official": true, "star_count": 582, "description": "The WordPress rich content management system can utilize plugins, widgets, and themes." },
    { "is_automated": false, "name": "mysql", "is_trusted": false, "is_official": true, "star_count": 1300, "description": "MySQL is a widely used, open-source relational database management system (RDBMS)." },
    { "is_automated": false, "name": "mongo", "is_trusted": false, "is_official": true, "star_count": 1100, "description": "MongoDB document databases provide high availability and easy scalability." },
    { "is_automated": false, "name": "centos", "is_trusted": false, "is_official": true, "star_count": 1600, "description": "The official build of CentOS." },
    { "is_automated": false, "name": "node", "is_trusted": false, "is_official": true, "star_count": 1200, "description": "Node.js is a JavaScript-based platform for server-side and networking applications." },
    { "is_automated": false, "name": "nginx", "is_trusted": false, "is_official": true, "star_count": 1600, "description": "Official build of Nginx." },
    { "is_automated": false, "name": "postgres", "is_trusted": false, "is_official": true, "star_count": 1200, "description": "The PostgreSQL object-relational database system provides reliability and data integrity." },
    { "is_automated": true, "name": "microsoft/aspnet", "is_trusted": true, "is_official": false, "star_count": 277, "description": "ASP.NET is an open source server-side Web application framework" }
];
function searchImagesInRegistryHub(prefix, cache) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        if (prefix.length === 0) {
            // return the popular images if user invoked intellisense
            // right after typing the keyword and ':' (e.g. 'image:').
            return Promise.resolve(popular.slice(0));
        }
        // Do an image search on Docker hub and return the results
        return (yield invokeHubSearch(prefix, 100, cache)).results;
    });
}
// https://registry.hub.docker.com/v1/search?q=redis&n=1
// {
//     "num_pages": 10,
//     "num_results": 10,
//     "results": [
//         {
//             "is_automated": false,
//             "name": "redis",
//             "is_trusted": false,
//             "is_official": true,
//             "star_count": 830,
//             "description": "Redis is an open source key-value store that functions as a data structure server."
//         }
//     ],
//     "page_size": 1,
//     "query": "redis",
//     "page": 1
// }
function invokeHubSearch(imageName, count, cache) {
    // https://registry.hub.docker.com/v1/search?q=redis&n=1
    return httpsRequestJson({
        hostname: 'registry.hub.docker.com',
        port: 443,
        path: '/v1/search?q=' + encodeURIComponent(imageName) + '&n=' + count,
        method: 'GET',
    }, cache);
}
// tslint:disable-next-line:no-any
let JSON_CACHE = {};
function httpsRequestJson(opts, cache) {
    if (!cache) {
        return doHttpsRequestJson(opts);
    }
    let cacheKey = `${opts.method} ${opts.hostname} ${opts.path}`;
    if (!JSON_CACHE[cacheKey]) {
        JSON_CACHE[cacheKey] = doHttpsRequestJson(opts);
    }
    // new promise to avoid cancelling
    return new Promise((resolve, reject) => JSON_CACHE[cacheKey].then(resolve, reject));
}
function doHttpsRequestJson(opts) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        opts.headers = Object.assign(Object.assign({}, opts.headers), { 'Accept': 'application/json', 'User-Agent': `coc-docker/${pkg.version}` });
        return JSON.parse(yield httpsRequest(opts));
    });
}
function httpsRequest(opts) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        return new Promise((resolve, reject) => {
            let req = https_1.request(opts, (res) => {
                let data = '';
                res.on('data', (d) => data += d);
                res.on('end', () => resolve(data));
            });
            req.end();
            req.on('error', reject);
        });
    });
}
//# sourceMappingURL=suggestSupportHelper.js.map